// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "ilyakasharokov/internal/app/model"
)

// RepoDBModel is an autogenerated mock type for the RepoDBModel type
type RepoDBModel struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *RepoDBModel) AddItem(_a0 model.User, _a1 string, _a2 model.Link, _a3 context.Context) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, string, model.Link, context.Context) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BunchSave provides a mock function with given fields: _a0, _a1, _a2
func (_m *RepoDBModel) BunchSave(_a0 context.Context, _a1 model.User, _a2 []model.Link) ([]model.ShortLink, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []model.ShortLink
	if rf, ok := ret.Get(0).(func(context.Context, model.User, []model.Link) []model.ShortLink); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ShortLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User, []model.Link) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckExist provides a mock function with given fields: _a0, _a1
func (_m *RepoDBModel) CheckExist(_a0 model.User, _a1 string) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.User, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetByUser provides a mock function with given fields: _a0, _a1
func (_m *RepoDBModel) GetByUser(_a0 model.User, _a1 context.Context) (model.Links, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.Links
	if rf, ok := ret.Get(0).(func(model.User, context.Context) model.Links); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Links)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User, context.Context) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: _a0, _a1, _a2
func (_m *RepoDBModel) GetItem(_a0 model.User, _a1 string, _a2 context.Context) (model.Link, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 model.Link
	if rf, ok := ret.Get(0).(func(model.User, string, context.Context) model.Link); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(model.Link)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User, string, context.Context) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItems provides a mock function with given fields: _a0, _a1
func (_m *RepoDBModel) RemoveItems(_a0 model.User, _a1 []int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, []int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
